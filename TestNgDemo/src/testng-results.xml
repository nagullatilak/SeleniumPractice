<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="3" total="15" passed="10" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-08-09T11:07:13 IST" name="All test Suite" finished-at="2021-08-09T11:07:17 IST" duration-ms="3777">
    <groups>
      <group name="group">
        <method signature="First.s()[pri:0, instance:test.First@2b71e916]" name="s" class="test.First"/>
        <method signature="HomeLoan.mobileLoginHomeLoan()[pri:0, instance:test.HomeLoan@13c9d689]" name="mobileLoginHomeLoan" class="test.HomeLoan"/>
        <method signature="TestNg.s()[pri:0, instance:test.TestNg@618b19ad]" name="s" class="test.TestNg"/>
      </group> <!-- group -->
    </groups>
    <test started-at="2021-08-09T11:07:13 IST" name="Car Loan" finished-at="2021-08-09T11:07:13 IST" duration-ms="49">
      <class name="test.CarLoan">
        <test-method is-config="true" signature="beforeSuite()[pri:0, instance:test.CarLoan@15de0b3c]" started-at="2021-08-09T11:07:13 IST" name="beforeSuite" finished-at="2021-08-09T11:07:13 IST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method signature="webLoginCarLoan()[pri:0, instance:test.CarLoan@15de0b3c]" started-at="2021-08-09T11:07:13 IST" name="webLoginCarLoan" finished-at="2021-08-09T11:07:13 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- webLoginCarLoan -->
        <test-method signature="apiLoginCarLoan()[pri:0, instance:test.CarLoan@15de0b3c]" started-at="2021-08-09T11:07:13 IST" name="apiLoginCarLoan" finished-at="2021-08-09T11:07:13 IST" depends-on-methods="test.CarLoan.webLoginCarLoan" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- apiLoginCarLoan -->
        <test-method is-config="true" signature="afterSuite()[pri:0, instance:test.CarLoan@15de0b3c]" started-at="2021-08-09T11:07:17 IST" name="afterSuite" finished-at="2021-08-09T11:07:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- test.CarLoan -->
    </test> <!-- Car Loan -->
    <test started-at="2021-08-09T11:07:13 IST" name="Personal Loan" finished-at="2021-08-09T11:07:17 IST" duration-ms="3777">
      <class name="test.HomeLoan">
        <test-method is-config="true" signature="beforemethod()[pri:0, instance:test.HomeLoan@13c9d689]" started-at="2021-08-09T11:07:17 IST" name="beforemethod" finished-at="2021-08-09T11:07:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method signature="apiLoginHomeLoan()[pri:0, instance:test.HomeLoan@13c9d689]" started-at="2021-08-09T11:07:17 IST" name="apiLoginHomeLoan" finished-at="2021-08-09T11:07:17 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- apiLoginHomeLoan -->
        <test-method is-config="true" signature="after()[pri:0, instance:test.HomeLoan@13c9d689]" started-at="2021-08-09T11:07:17 IST" name="after" finished-at="2021-08-09T11:07:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method signature="mobileLoginHomeLoan()[pri:0, instance:test.HomeLoan@13c9d689]" started-at="2021-08-09T11:07:17 IST" name="mobileLoginHomeLoan" finished-at="2021-08-09T11:07:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mobileLoginHomeLoan -->
        <test-method is-config="true" signature="beforemethod()[pri:0, instance:test.HomeLoan@13c9d689]" started-at="2021-08-09T11:07:17 IST" name="beforemethod" finished-at="2021-08-09T11:07:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method is-config="true" signature="after()[pri:0, instance:test.HomeLoan@13c9d689]" started-at="2021-08-09T11:07:17 IST" name="after" finished-at="2021-08-09T11:07:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method is-config="true" signature="beforemethod()[pri:0, instance:test.HomeLoan@13c9d689]" started-at="2021-08-09T11:07:17 IST" name="beforemethod" finished-at="2021-08-09T11:07:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforemethod -->
        <test-method signature="webLoginHomeLoan()[pri:0, instance:test.HomeLoan@13c9d689]" started-at="2021-08-09T11:07:17 IST" name="webLoginHomeLoan" finished-at="2021-08-09T11:07:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- webLoginHomeLoan -->
        <test-method is-config="true" signature="after()[pri:0, instance:test.HomeLoan@13c9d689]" started-at="2021-08-09T11:07:17 IST" name="after" finished-at="2021-08-09T11:07:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
      </class> <!-- test.HomeLoan -->
      <class name="test.TestNg">
        <test-method is-config="true" signature="beforeMethod(java.lang.String)[pri:0, instance:test.TestNg@618b19ad]" started-at="2021-08-09T11:07:13 IST" name="beforeMethod" finished-at="2021-08-09T11:07:16 IST" duration-ms="3662" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[https://www.toolsqa.com/]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="f()[pri:0, instance:test.TestNg@618b19ad]" started-at="2021-08-09T11:07:16 IST" name="f" finished-at="2021-08-09T11:07:16 IST" duration-ms="6" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Free QA Automation Tools Tutorial for Beginners with Examples] but found [Tools QA]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Free QA Automation Tools Tutorial for Beginners with Examples] but found [Tools QA]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at test.TestNg.f(TestNg.java:18)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:829)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method signature="s()[pri:0, instance:test.TestNg@618b19ad]" started-at="2021-08-09T11:07:17 IST" name="s" finished-at="2021-08-09T11:07:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- s -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.TestNg@618b19ad]" started-at="2021-08-09T11:07:17 IST" name="afterMethod" finished-at="2021-08-09T11:07:17 IST" duration-ms="76" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- test.TestNg -->
      <class name="test.First">
        <test-method signature="data(java.lang.String,java.lang.String)[pri:0, instance:test.First@2b71e916]" started-at="2021-08-09T11:07:17 IST" name="data" data-provider="getData" finished-at="2021-08-09T11:07:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[firstpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- data -->
        <test-method signature="data(java.lang.String,java.lang.String)[pri:0, instance:test.First@2b71e916]" started-at="2021-08-09T11:07:17 IST" name="data" data-provider="getData" finished-at="2021-08-09T11:07:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[secondusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[secondpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- data -->
        <test-method signature="data(java.lang.String,java.lang.String)[pri:0, instance:test.First@2b71e916]" started-at="2021-08-09T11:07:17 IST" name="data" data-provider="getData" finished-at="2021-08-09T11:07:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[thridusername]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[thirdpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- data -->
        <test-method signature="f()[pri:0, instance:test.First@2b71e916]" started-at="2021-08-09T11:07:17 IST" name="f" finished-at="2021-08-09T11:07:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- f -->
        <test-method signature="s()[pri:0, instance:test.First@2b71e916]" started-at="2021-08-09T11:07:17 IST" name="s" finished-at="2021-08-09T11:07:17 IST" duration-ms="1" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at test.First.s(First.java:15)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:829)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- s -->
      </class> <!-- test.First -->
    </test> <!-- Personal Loan -->
  </suite> <!-- All test Suite -->
</testng-results>
